const express = require('express');
const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const requestIp = require('request-ip');
const TelegramBot = require('node-telegram-bot-api');

const app = express();
app.use(express.json());
app.set('trust proxy', true);

app.use(express.static(path.join(__dirname, 'public')));

// === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const CHAT_IDS = (process.env.CHAT_IDS || '').split(',').map(id => id.trim());
const DOMAIN = process.env.DOMAIN || 'https://example.com';

// === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ===
const VISITORS_FILE = './visitors.json';
let visitors = {};
try {
  if (fs.existsSync(VISITORS_FILE)) {
    visitors = JSON.parse(fs.readFileSync(VISITORS_FILE));
  }
} catch (e) {
  console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è visitors.json:', e);
}

// === Telegram –±–æ—Ç ===
const bot = new TelegramBot(TELEGRAM_TOKEN);
bot.setWebHook(`${DOMAIN}/bot${TELEGRAM_TOKEN}`);

app.post(`/bot${TELEGRAM_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

bot.onText(/\/start/, msg => {
  bot.sendMessage(msg.chat.id, '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Å —Å–∞–π—Ç–∞.');
});

bot.onText(/\/stats/, msg => {
  const keys = Object.keys(visitors);
  bot.sendMessage(msg.chat.id, `üëÄ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: ${keys.length}`);
});

app.get('/ping-bot', (req, res) => res.status(200).send('OK'));

// === –£—Ç–∏–ª–∏—Ç—ã ===

function extractIPv4(ip) {
  if (!ip) return '';
  // x-forwarded-for –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º IP —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
  const parts = ip.split(',');
  const first = parts[0].trim();
  // –ï—Å–ª–∏ IP –≤ —Ñ–æ—Ä–º–∞—Ç–µ IPv6 —Å IPv4, –Ω–∞–ø—Ä–∏–º–µ—Ä ::ffff:192.168.1.1
  return first.includes(':') && first.includes('.') ? first.split(':').pop() : first;
}

function detectBot(ua) {
  if (!ua) return true;
  return /bot|crawl|spider|google|yandex|baidu|bing|duckduck/i.test(ua);
}

const googleIpRanges = [
  /^66\.249\./, /^64\.233\./, /^72\.14\./, /^203\.208\./, /^216\.239\./
];
function isGoogleIP(ip) {
  return googleIpRanges.some(regex => regex.test(ip));
}

// === –ö—ç—à ===
const geoCache = new Map();
const uaCache = new Map();

async function getGeo(ip) {
  if (geoCache.has(ip)) return geoCache.get(ip) + ' (–∫—ç—à)';
  try {
    const res = await fetch(`http://ip-api.com/json/${ip}?fields=status,country,city,query`);
    const data = await res.json();
    if (data.status === 'success') {
      const geo = `${data.country}, ${data.city}`;
      geoCache.set(ip, geo);
      return geo;
    }
  } catch {}
  try {
    const res = await fetch(`https://ipwhois.app/json/${ip}`);
    const data = await res.json();
    if (data.success !== false) {
      const geo = `${data.country}, ${data.city}`;
      geoCache.set(ip, geo);
      return geo;
    }
  } catch {}
  geoCache.set(ip, '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ');
  return '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
}

async function getBrowserDataFromAPI(userAgent) {
  if (!userAgent) return { browser: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', os: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', device: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' };
  if (uaCache.has(userAgent)) return { ...uaCache.get(userAgent), cached: true };

  const apiKey = 'faab5f7aef335ee5e582e6d6f9e077a';
  try {
    const res = await fetch('https://api.whatismybrowser.com/api/v3/detect', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-KEY': apiKey
      },
      body: JSON.stringify({ user_agent: userAgent })
    });
    const json = await res.json();
    const result = json?.result?.parsed;
    const parsed = {
      browser: result?.browser_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      os: result?.operating_system_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      device: result?.simple_sub_description || result?.hardware_type || result?.device_type || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    };
    uaCache.set(userAgent, parsed);
    return parsed;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ API WhatIsMyBrowser:', e);
    return { browser: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', os: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', device: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' };
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ VPN/Proxy –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
function checkVPNProxy({ ipRegion, timezone, lang, clientTime, serverTime, touchSupported, userAgentDevice }) {
  let score = 0;
  const reasons = [];

  // 1. –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞ IP
  if (ipRegion && timezone && !timezone.includes(ipRegion.split(',')[0])) {
    score += 4;
    reasons.push(`–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (${timezone}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–µ–≥–∏–æ–Ω–æ–º IP (${ipRegion})`);
  }

  // 2. –†–∞–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ –±–æ–ª—å—à–µ 60 –º–∏–Ω—É—Ç
  if (clientTime && serverTime && Math.abs(clientTime - serverTime) > 60 * 60 * 1000) {
    score += 3;
    reasons.push('–í—Ä–µ–º—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞');
  }

  // 3. –Ø–∑—ã–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–µ–≥–∏–æ–Ω–æ–º IP
  if (ipRegion && lang && !lang.toLowerCase().includes(ipRegion.split(',')[0].toLowerCase())) {
    score += 2;
    reasons.push(`–Ø–∑—ã–∫ (${lang}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–≥–∏–æ–Ω—É IP (${ipRegion})`);
  }

  // 4. –ù–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ touch, –Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω–æ–µ
  if (userAgentDevice && /mobile|phone|tablet|android|iphone/i.test(userAgentDevice) && !touchSupported) {
    score += 1;
    reasons.push('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω–æ–µ, –Ω–æ touch-—Å–æ–±—ã—Ç–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
  }

  return { score, reasons };
}

function getVisitStatus(fingerprint, ip) {
  const id = fingerprint || `ip_${ip}`;
  const entry = visitors[id];
  if (!entry) return { status: 'new' };

  const now = Date.now();
  const last = new Date(entry.time).getTime();
  const diff = (now - last) / 1000;

  const sameIP = entry.ip === ip;
  const score = fingerprint ? (sameIP ? 100 : 60) : 50;
  const reason = fingerprint
    ? (sameIP ? 'Fingerprint + IP' : 'Fingerprint —Å–æ–≤–ø–∞–ª')
    : '–¢–æ–ª—å–∫–æ IP';

  return {
    status: 'repeat',
    score,
    reason,
    lastSeen: entry.time
  };
}

// === –†–æ—É—Ç –¥–ª—è —Å–±–æ—Ä–∞ –≤–∏–∑–∏—Ç–æ–≤ ===
app.post('/collect', async (req, res) => {
  const {
    fingerprint,
    userAgent,
    screenWidth,
    screenHeight,
    timezone,
    language,
    clientTime, // timestamp –∫–ª–∏–µ–Ω—Ç–∞ –≤ ms
    touchSupported,
  } = req.body || {};

  // –ü–æ–ª—É—á–∞–µ–º IP –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
  const rawIp = requestIp.getClientIp(req) || req.headers['x-forwarded-for'] || req.socket.remoteAddress;
  const ip = extractIPv4(rawIp);

  if (!fingerprint && !ip) return res.status(400).json({ ok: false, error: '–ù–µ—Ç fingerprint –∏ IP' });
  if (isGoogleIP(ip)) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º GoogleBot
    return res.status(200).json({ ok: true, skip: 'googlebot' });
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ API
  const uaResult = await getBrowserDataFromAPI(userAgent);

  // –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ –ø–æ IP
  const geoRaw = await getGeo(ip);
  // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –≤–æ–∑—å–º—ë–º —Å—Ç—Ä–∞–Ω—É –∏–∑ geoRaw, –Ω–∞–ø—Ä–∏–º–µ—Ä "Russia, Moscow" ‚Üí "Russia"
  const ipRegion = geoRaw.split(',')[0] || '';

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤–∏–∑–∏—Ç–∞ (–Ω–æ–≤—ã–π/–ø–æ–≤—Ç–æ—Ä–Ω—ã–π)
  const status = getVisitStatus(fingerprint, ip);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ—Ç–∞ –ø–æ User-Agent
  const isBot = detectBot(userAgent);
  const type = isBot ? 'ü§ñ –ë–æ—Ç' : 'üë§ –ß–µ–ª–æ–≤–µ–∫';

  // –¢–µ–∫—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–∞
  const serverTime = Date.now();
  const clientTimeNum = clientTime ? Number(clientTime) : null;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ VPN/Proxy
  const vpnCheck = checkVPNProxy({
    ipRegion,
    timezone,
    lang: language,
    clientTime: clientTimeNum,
    serverTime,
    touchSupported: !!touchSupported,
    userAgentDevice: uaResult.device
  });

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  let msg = '';

  if (status.status === 'new') {
    msg += 'üÜï –ù–û–í–´–ô –ó–ê–•–û–î\n';
  } else if (status.status === 'repeat') {
    msg += `‚ôªÔ∏è –ü–û–í–¢–û–†–ù–´–ô –ó–ê–•–û–î\n–®–∞–Ω—Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: ${status.score}% (${status.reason})\n`;
    msg += `–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${new Date(status.lastSeen).toLocaleString('ru-RU', { timeZone: timezone || 'UTC' })}\n`;
  } else {
    msg += '‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –ó–ê–•–û–î\n';
  }

  msg += `–¢–∏–ø: ${type}\n`;
  msg += `IP: ${ip} (${geoRaw})\n`;
  msg += `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${uaResult.device || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
  msg += `–û–°: ${uaResult.os || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
  msg += `–ë—Ä–∞—É–∑–µ—Ä: ${uaResult.browser || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
  if (!userAgent) msg += '–ü—Ä–∏—á–∏–Ω–∞: –ø—É—Å—Ç–æ–π User-Agent\n';
  if (isBot) msg += '–ü—Ä–∏—á–∏–Ω–∞: –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –±–æ—Ç –ø–æ User-Agent\n';

  if (vpnCheck.score >= 5) {
    msg += `‚ö†Ô∏è –í–æ–∑–º–æ–∂–µ–Ω VPN/Proxy (–æ—Ü–µ–Ω–∫–∞ ${vpnCheck.score}):\n‚Ä¢ ${vpnCheck.reasons.join('\n‚Ä¢ ')}\n`;
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∏–∑–∏—Ç
  const visitId = fingerprint || `ip_${ip}`;
  visitors[visitId] = {
    fingerprint,
    ip,
    time: new Date().toISOString(),
    userAgent,
    geo: geoRaw,
    uaParsed: uaResult,
  };

  try {
    fs.writeFileSync(VISITORS_FILE, JSON.stringify(visitors, null, 2));
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ visitors.json:', e);
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
  for (const chatId of CHAT_IDS) {
    try {
      await bot.sendMessage(chatId, msg);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', e);
    }
  }

  res.json({ ok: true });
});

// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
